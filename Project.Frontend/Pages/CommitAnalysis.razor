@namespace Project.Frontend.Pages
@page "/radzengrid"
@using Project.Frontend;
@using System.Globalization


<RadzenText TextStyle="TextStyle.H3" TagName="TagName.H1" Class="my-4">
    Git repository overall commit frequency
</RadzenText>

 <div class="container my-5">
        <div class="row">
            <div class="col">
                <RadzenCard Class="w-100 mb-4" Style="display: flex; align-items: center; gap: 0.5rem" >
                    <RadzenCheckBox @bind-Value="@smooth" Name="smooth"></RadzenCheckBox>
                    <RadzenLabel Text="Smooth" For="smooth" Style="margin-right: 1rem;"/>
                    <RadzenCheckBox @bind-Value="@showDataLabels" Name="dataLabels"></RadzenCheckBox>
                    <RadzenLabel Text="Show Data Labels" For="dataLabels" />
                </RadzenCard>
                <RadzenChart>
                    <RadzenAreaSeries Smooth="@smooth" Data="@revenue2019" CategoryProperty="Date" Title="2019" ValueProperty="Revenue" RenderingOrder="1">
                        <RadzenSeriesDataLabels Visible="@showDataLabels" />
                    </RadzenAreaSeries>
                    <RadzenAreaSeries Smooth="@smooth" Data="@revenue2020" CategoryProperty="Date" Title="2020" LineType="LineType.Dashed" ValueProperty="Revenue">
                        <RadzenSeriesDataLabels Visible="@showDataLabels" />
                    </RadzenAreaSeries>
                    <RadzenCategoryAxis Padding="20" Formatter="@FormatAsMonth" />
                    <RadzenValueAxis Formatter="@FormatAsUSD">
                        <RadzenGridLines Visible="true" />
                        <RadzenAxisTitle Text="Revenue in USD" />
                    </RadzenValueAxis>
                </RadzenChart>
            </div>
        </div>
    </div>

<h3>Git repository author commit frequency</h3>

@if(pretendAuthor == null)
{
    <p>Loading....... DataGrid</p>
} 
else
{
    <RadzenGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" AllowPaging="true" PageSize="10"
        AllowSorting="true" Data=@pretendAuthor TItem="PretendAuthor" ColumnWidth="150px">

        <Columns>
            <RadzenGridColumn TItem="PretendAuthor" Property="aName" Title="Auhtor Name"></RadzenGridColumn>
            <RadzenGridColumn TItem="PretendAuthor" Property="aDate" Title="Auhtor Date"></RadzenGridColumn>
            
        </Columns>
    </RadzenGrid>
}

@code {
    IEnumerable<PretendAuthor>? pretendAuthor;
    protected override async Task OnInitializedAsync()
    {
        pretendAuthor= await Task.Run(()=> new PretendAuthorService().PretendAuthorList());
    }   

    bool smooth = true;
    bool showDataLabels = false;

    class DataItem
    {
        public string Date { get; set; }
        public double Revenue { get; set; }
    }

     string FormatAsUSD(object value)
    {
        return ((double)value).ToString("C0", CultureInfo.CreateSpecificCulture("en-US"));
    }

    string FormatAsMonth(object value)
    {
        if (value != null)
        {
            return Convert.ToDateTime(value).ToString("MMM");
        }

        return string.Empty;
    }

    DataItem[] revenue2019 = new DataItem[] {
        new DataItem
        {
            Date = ("2019-01-01"),
            Revenue = 234000
        },
        new DataItem
        {
            Date = ("2019-02-01"),
            Revenue = 269000
        },
        new DataItem
        {
            Date = ("2019-03-01"),
            Revenue = 233000
        },
        new DataItem
        {
            Date = ("2019-04-01"),
            Revenue = 244000
        },
        new DataItem
        {
            Date = ("2019-05-01"),
            Revenue = 214000
        },
        new DataItem
        {
            Date = ("2019-06-01"),
            Revenue = 253000
        },
        new DataItem
        {
            Date = ("2019-07-01"),
            Revenue = 274000
        },
        new DataItem
        {
            Date = ("2019-08-01"),
            Revenue = 284000
        },
        new DataItem
        {
            Date = ("2019-09-01"),
            Revenue = 273000
        },
        new DataItem
        {
            Date = ("2019-10-01"),
            Revenue = 282000
        },
        new DataItem
        {
            Date = ("2019-11-01"),
            Revenue = 289000
        },
        new DataItem
        {
            Date = ("2019-12-01"),
            Revenue = 294000
        }
    };

    DataItem[] revenue2020 = new DataItem[] {
        new DataItem
        {
            Date = ("2019-01-01"),
            Revenue = 334000
        },
        new DataItem
        {
            Date = ("2019-02-01"),
            Revenue = 369000
        },
        new DataItem
        {
            Date = ("2019-03-01"),
            Revenue = 333000
        },
        new DataItem
        {
            Date = ("2019-04-01"),
            Revenue = 344000
        },
        new DataItem
        {
            Date = ("2019-05-01"),
            Revenue = 314000
        },
        new DataItem
        {
            Date = ("2019-06-01"),
            Revenue = 353000
        },
        new DataItem
        {
            Date = ("2019-07-01"),
            Revenue = 374000
        },
        new DataItem
        {
            Date = ("2019-08-01"),
            Revenue = 384000
        },
        new DataItem
        {
            Date = ("2019-09-01"),
            Revenue = 373000
        },
        new DataItem
        {
            Date = ("2019-10-01"),
            Revenue = 382000
        },
        new DataItem
        {
            Date = ("2019-11-01"),
            Revenue = 389000
        },
        new DataItem
        {
            Date = ("2019-12-01"),
            Revenue = 394000
        }
    };
}

<!-- list of components: https://stackoverflow.com/questions/61089169/how-do-you-render-a-list-of-components-in-a-loop-blazor -->
<!-- Error fix: https://stackoverflow.com/questions/73040190/blazor-cs0103-the-name-lines-does-not-exist-in-the-current-context  -->
<!-- Error fix: https://github.com/dotnet/aspnetcore/issues/9642  -->
<!--   -->
<!--   -->
<!--   -->
<!--   -->
<!--   -->
<!--   -->
<!--   -->
<!--   -->
<!--   -->
<!--   -->
<!--   -->
